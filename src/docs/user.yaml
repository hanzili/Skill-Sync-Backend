components:
  schemas:
    securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
        enrolledRoadmaps:
          type: array
          items:
            type: string
            format: objectId
        createdRoadmaps:
          type: array
          items:
            type: string
            format: objectId
    Token:
      type: object
      properties:
        token:
          type: string

paths:
  /api/users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'

  /api/users/login:
    post:
      tags:
        - Users
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'

  /api/users/users:
    get:
      tags:
        - Users
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        200:
          description: Users fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /api/users/user/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: User fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - Users
      summary: Update user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
      security:
        - bearerAuth: []
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      tags:
        - Users
      summary: Delete user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: User deleted successfully
          # Assuming no content is returned upon successful deletion
